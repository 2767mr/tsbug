/* tslint:disable */
/* eslint-disable */
/**
 * Cranberry.WebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  MangoBananaSwDto,
  MangoDtoGridResult,
  ReleaseMangoDto,
  UpdateMangoDto,
} from "../models/index";
import {
  MangoBananaSwDtoFromJSON,
  MangoDtoGridResultFromJSON,
  ReleaseMangoDtoToJSON,
  UpdateMangoDtoToJSON,
} from "../models/index";
import * as runtime from "../runtime";

export interface CreateMangoRequest {
  updateMangoDto?: UpdateMangoDto;
}

export interface DeleteMangoRequest {
  id: number;
}

export interface GetMangoBananaSwsRequest {
  id: number;
}

export interface GetMangosRequest {
  request?: any;
  textFilter?: string;
}

export interface ReleaseMangoRequest {
  releaseMangoDto?: ReleaseMangoDto;
}

export interface UpdateMangoRequest {
  id: number;
  updateMangoDto?: UpdateMangoDto;
}

/**
 *
 */
export class MangoApi extends runtime.BaseAPI {
  /**
   */
  async createMangoRaw(
    requestParameters: CreateMangoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/Mango`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateMangoDtoToJSON(requestParameters["updateMangoDto"]),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async createMango(
    requestParameters: CreateMangoRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.createMangoRaw(requestParameters, initOverrides);
  }

  /**
   */
  async deleteMangoRaw(
    requestParameters: DeleteMangoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling deleteMango().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Mango/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"]))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async deleteMango(
    requestParameters: DeleteMangoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteMangoRaw(requestParameters, initOverrides);
  }

  /**
   */
  async getMangoBananaSwsRaw(
    requestParameters: GetMangoBananaSwsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<MangoBananaSwDto>>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getMangoBananaSws().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Mango/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"]))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(MangoBananaSwDtoFromJSON)
    );
  }

  /**
   */
  async getMangoBananaSws(
    requestParameters: GetMangoBananaSwsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<MangoBananaSwDto>> {
    const response = await this.getMangoBananaSwsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getMangosRaw(
    requestParameters: GetMangosRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MangoDtoGridResult>> {
    const queryParameters: any = {};

    if (requestParameters["request"] != null) {
      queryParameters["request"] = requestParameters["request"];
    }

    if (requestParameters["textFilter"] != null) {
      queryParameters["textFilter"] = requestParameters["textFilter"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Mango`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MangoDtoGridResultFromJSON(jsonValue)
    );
  }

  /**
   */
  async getMangos(
    requestParameters: GetMangosRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MangoDtoGridResult> {
    const response = await this.getMangosRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async releaseMangoRaw(
    requestParameters: ReleaseMangoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/Mango/release`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ReleaseMangoDtoToJSON(requestParameters["releaseMangoDto"]),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async releaseMango(
    requestParameters: ReleaseMangoRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.releaseMangoRaw(requestParameters, initOverrides);
  }

  /**
   */
  async updateMangoRaw(
    requestParameters: UpdateMangoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling updateMango().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/Mango/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"]))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateMangoDtoToJSON(requestParameters["updateMangoDto"]),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async updateMango(
    requestParameters: UpdateMangoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.updateMangoRaw(requestParameters, initOverrides);
  }
}
