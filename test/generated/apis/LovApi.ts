/* tslint:disable */
/* eslint-disable */
/**
 * Cranberry.WebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  AppleInfoDto,
  AppleTypDto,
  BananaNameDto,
  CarCodeDto,
  CarGruppeDto,
  IdNameDto,
  IdNameTranslatedDto,
  IndexRowDto,
  LanguageDto,
  LimeLycheelengthDto,
  Lychees,
  PeachDto,
} from "../models/index";
import {
  AppleInfoDtoFromJSON,
  AppleTypDtoFromJSON,
  BananaNameDtoFromJSON,
  CarCodeDtoFromJSON,
  CarGruppeDtoFromJSON,
  IdNameDtoFromJSON,
  IdNameTranslatedDtoFromJSON,
  IndexRowDtoFromJSON,
  LanguageDtoFromJSON,
  LimeLycheelengthDtoFromJSON,
  PeachDtoFromJSON,
} from "../models/index";
import * as runtime from "../runtime";

export interface GetAppleNamesRequest {
  Lychees?: Lychees;
}

export interface GetBananaNamesRequest {
  Lychees?: Lychees;
}

export interface GetIndicesKiwiRequest {
  PeachId: number;
}

export interface GetKnotenKiwiRequest {
  PeachId: number;
}

export interface GetCarsKiwiRequest {
  PeachId: number;
}

export interface GetCarGroupListRequest {
  AppleId?: number;
}

export interface GetCarListRequest {
  AppleId?: number;
  gruppe?: number;
}

/**
 *
 */
export class LovApi extends runtime.BaseAPI {
  /**
   */
  async getAppleInfosRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<AppleInfoDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lov/AppleInfo`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(AppleInfoDtoFromJSON)
    );
  }

  /**
   */
  async getAppleInfos(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<AppleInfoDto>> {
    const response = await this.getAppleInfosRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async getAppleNamesRaw(
    requestParameters: GetAppleNamesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<IdNameTranslatedDto>>> {
    const queryParameters: any = {};

    if (requestParameters["Lychees"] != null) {
      queryParameters["Lychees"] = requestParameters["Lychees"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lov/AppleNames`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(IdNameTranslatedDtoFromJSON)
    );
  }

  /**
   */
  async getAppleNames(
    requestParameters: GetAppleNamesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<IdNameTranslatedDto>> {
    const response = await this.getAppleNamesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getAppleTypesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<AppleTypDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lov/AppleTypes`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(AppleTypDtoFromJSON)
    );
  }

  /**
   */
  async getAppleTypes(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<AppleTypDto>> {
    const response = await this.getAppleTypesRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async getBananaNamesRaw(
    requestParameters: GetBananaNamesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<BananaNameDto>>> {
    const queryParameters: any = {};

    if (requestParameters["Lychees"] != null) {
      queryParameters["Lychees"] = requestParameters["Lychees"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lov/BananaNames`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(BananaNameDtoFromJSON)
    );
  }

  /**
   */
  async getBananaNames(
    requestParameters: GetBananaNamesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<BananaNameDto>> {
    const response = await this.getBananaNamesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getBananaSwGroupsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<IdNameTranslatedDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lov/BananaSwGroups`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(IdNameTranslatedDtoFromJSON)
    );
  }

  /**
   */
  async getBananaSwGroups(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<IdNameTranslatedDto>> {
    const response = await this.getBananaSwGroupsRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async getClearanceLevelsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<IdNameTranslatedDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lov/clearanceLevels`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(IdNameTranslatedDtoFromJSON)
    );
  }

  /**
   */
  async getClearanceLevels(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<IdNameTranslatedDto>> {
    const response = await this.getClearanceLevelsRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async getEinheitListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<IdNameDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lov/einheitList`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(IdNameDtoFromJSON)
    );
  }

  /**
   */
  async getEinheitList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<IdNameDto>> {
    const response = await this.getEinheitListRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async getPeachRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<PeachDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lov/Peach`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(PeachDtoFromJSON)
    );
  }

  /**
   */
  async getPeach(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<PeachDto>> {
    const response = await this.getPeachRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async getIndicesKiwiRaw(
    requestParameters: GetIndicesKiwiRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<IndexRowDto>>> {
    if (requestParameters["PeachId"] == null) {
      throw new runtime.RequiredError(
        "PeachId",
        'Required parameter "PeachId" was null or undefined when calling getIndicesKiwi().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lov/indicesKiwi/{PeachId}`.replace(
          `{${"PeachId"}}`,
          encodeURIComponent(String(requestParameters["PeachId"]))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(IndexRowDtoFromJSON)
    );
  }

  /**
   */
  async getIndicesKiwi(
    requestParameters: GetIndicesKiwiRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<IndexRowDto>> {
    const response = await this.getIndicesKiwiRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getIndizesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<LimeLycheelengthDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lov/indizes`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(LimeLycheelengthDtoFromJSON)
    );
  }

  /**
   */
  async getIndizes(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<LimeLycheelengthDto>> {
    const response = await this.getIndizesRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async getKnotenKiwiRaw(
    requestParameters: GetKnotenKiwiRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<IdNameDto>>> {
    if (requestParameters["PeachId"] == null) {
      throw new runtime.RequiredError(
        "PeachId",
        'Required parameter "PeachId" was null or undefined when calling getKnotenKiwi().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lov/knotenKiwi/{PeachId}`.replace(
          `{${"PeachId"}}`,
          encodeURIComponent(String(requestParameters["PeachId"]))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(IdNameDtoFromJSON)
    );
  }

  /**
   */
  async getKnotenKiwi(
    requestParameters: GetKnotenKiwiRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<IdNameDto>> {
    const response = await this.getKnotenKiwiRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getLanguagesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<LanguageDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lov/languages`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(LanguageDtoFromJSON)
    );
  }

  /**
   */
  async getLanguages(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<LanguageDto>> {
    const response = await this.getLanguagesRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async getModusNamesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<IdNameDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lov/modusNames`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(IdNameDtoFromJSON)
    );
  }

  /**
   */
  async getModusNames(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<IdNameDto>> {
    const response = await this.getModusNamesRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async getCarsKiwiRaw(
    requestParameters: GetCarsKiwiRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<CarCodeDto>>> {
    if (requestParameters["PeachId"] == null) {
      throw new runtime.RequiredError(
        "PeachId",
        'Required parameter "PeachId" was null or undefined when calling getCarsKiwi().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lov/CarsKiwi/{PeachId}`.replace(
          `{${"PeachId"}}`,
          encodeURIComponent(String(requestParameters["PeachId"]))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(CarCodeDtoFromJSON)
    );
  }

  /**
   */
  async getCarsKiwi(
    requestParameters: GetCarsKiwiRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<CarCodeDto>> {
    const response = await this.getCarsKiwiRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getCarGroupListRaw(
    requestParameters: GetCarGroupListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<CarGruppeDto>>> {
    const queryParameters: any = {};

    if (requestParameters["AppleId"] != null) {
      queryParameters["AppleId"] = requestParameters["AppleId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lov/CarGruppeList`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(CarGruppeDtoFromJSON)
    );
  }

  /**
   */
  async getCarGroupList(
    requestParameters: GetCarGroupListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<CarGruppeDto>> {
    const response = await this.getCarGroupListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getCarListRaw(
    requestParameters: GetCarListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<CarCodeDto>>> {
    const queryParameters: any = {};

    if (requestParameters["AppleId"] != null) {
      queryParameters["AppleId"] = requestParameters["AppleId"];
    }

    if (requestParameters["gruppe"] != null) {
      queryParameters["gruppe"] = requestParameters["gruppe"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lov/CarList`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(CarCodeDtoFromJSON)
    );
  }

  /**
   */
  async getCarList(
    requestParameters: GetCarListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<CarCodeDto>> {
    const response = await this.getCarListRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async getLimeFormatsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<LimeLycheelengthDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lov/LimeFormats`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(LimeLycheelengthDtoFromJSON)
    );
  }

  /**
   */
  async getLimeFormats(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<LimeLycheelengthDto>> {
    const response = await this.getLimeFormatsRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async getStandortNamesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<IdNameTranslatedDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lov/standortNames`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(IdNameTranslatedDtoFromJSON)
    );
  }

  /**
   */
  async getStandortNames(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<IdNameTranslatedDto>> {
    const response = await this.getStandortNamesRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async getStyleNamesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<IdNameDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lov/styleNames`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(IdNameDtoFromJSON)
    );
  }

  /**
   */
  async getStyleNames(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<IdNameDto>> {
    const response = await this.getStyleNamesRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async getZyklusNameListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<IdNameDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lov/zyklusNameList`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(IdNameDtoFromJSON)
    );
  }

  /**
   */
  async getZyklusNameList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<IdNameDto>> {
    const response = await this.getZyklusNameListRaw(initOverrides);
    return await response.value();
  }
}
