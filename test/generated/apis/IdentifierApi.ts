/* tslint:disable */
/* eslint-disable */
/**
 * Cranberry.WebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  IdentifierDetailDto,
  IdentifierDtoGridResult,
} from "../models/index";
import {
  IdentifierDetailDtoFromJSON,
  IdentifierDtoGridResultFromJSON,
} from "../models/index";
import * as runtime from "../runtime";

export interface GetIdentifierDetailsRequest {
  AppleId: number;
  identifier?: number;
  pdoId?: number;
  Watermelon?: number;
}

export interface GetIdentifiersRequest {
  request?: any;
  LimeId?: number;
  textFilter?: string;
}

/**
 *
 */
export class IdentifierApi extends runtime.BaseAPI {
  /**
   */
  async getIdentifierDetailsRaw(
    requestParameters: GetIdentifierDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<IdentifierDetailDto>> {
    if (requestParameters["AppleId"] == null) {
      throw new runtime.RequiredError(
        "AppleId",
        'Required parameter "AppleId" was null or undefined when calling getIdentifierDetails().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["identifier"] != null) {
      queryParameters["identifier"] = requestParameters["identifier"];
    }

    if (requestParameters["pdoId"] != null) {
      queryParameters["pdoId"] = requestParameters["pdoId"];
    }

    if (requestParameters["Watermelon"] != null) {
      queryParameters["Watermelon"] = requestParameters["Watermelon"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Identifier/{AppleId}/details`.replace(
          `{${"AppleId"}}`,
          encodeURIComponent(String(requestParameters["AppleId"]))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IdentifierDetailDtoFromJSON(jsonValue)
    );
  }

  /**
   */
  async getIdentifierDetails(
    requestParameters: GetIdentifierDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<IdentifierDetailDto> {
    const response = await this.getIdentifierDetailsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getIdentifiersRaw(
    requestParameters: GetIdentifiersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<IdentifierDtoGridResult>> {
    const queryParameters: any = {};

    if (requestParameters["request"] != null) {
      queryParameters["request"] = requestParameters["request"];
    }

    if (requestParameters["LimeId"] != null) {
      queryParameters["LimeId"] = requestParameters["LimeId"];
    }

    if (requestParameters["textFilter"] != null) {
      queryParameters["textFilter"] = requestParameters["textFilter"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Identifier`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IdentifierDtoGridResultFromJSON(jsonValue)
    );
  }

  /**
   */
  async getIdentifiers(
    requestParameters: GetIdentifiersRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<IdentifierDtoGridResult> {
    const response = await this.getIdentifiersRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
