/* tslint:disable */
/* eslint-disable */
/**
 * Cranberry.WebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  CreateIndexRowDto,
  IndexRowDtoGridResult,
  UpdateIndexRowDto,
} from "../models/index";
import {
  CreateIndexRowDtoToJSON,
  IndexRowDtoGridResultFromJSON,
  UpdateIndexRowDtoToJSON,
} from "../models/index";
import * as runtime from "../runtime";

export interface CheckIndexRowAvailableRequest {
  indexId: number;
  indexNr: string;
  value: string;
  PeachId?: number;
}

export interface CreateIndexRowRequest {
  PeachId?: number;
  createIndexRowDto?: CreateIndexRowDto;
}

export interface DeleteIndexRowRequest {
  indexId: number;
  PeachId?: number;
}

export interface GetIndexRowsRequest {
  PeachId?: number;
  request?: any;
}

export interface UpdateIndexRowRequest {
  PeachId?: number;
  updateIndexRowDto?: UpdateIndexRowDto;
}

/**
 *
 */
export class IndexApi extends runtime.BaseAPI {
  /**
   */
  async checkIndexRowAvailableRaw(
    requestParameters: CheckIndexRowAvailableRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<boolean>> {
    if (requestParameters["indexId"] == null) {
      throw new runtime.RequiredError(
        "indexId",
        'Required parameter "indexId" was null or undefined when calling checkIndexRowAvailable().'
      );
    }

    if (requestParameters["indexNr"] == null) {
      throw new runtime.RequiredError(
        "indexNr",
        'Required parameter "indexNr" was null or undefined when calling checkIndexRowAvailable().'
      );
    }

    if (requestParameters["value"] == null) {
      throw new runtime.RequiredError(
        "value",
        'Required parameter "value" was null or undefined when calling checkIndexRowAvailable().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["PeachId"] != null) {
      queryParameters["PeachId"] = requestParameters["PeachId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Index/{indexId}/{indexNr}/{value}`
          .replace(
            `{${"indexId"}}`,
            encodeURIComponent(String(requestParameters["indexId"]))
          )
          .replace(
            `{${"indexNr"}}`,
            encodeURIComponent(String(requestParameters["indexNr"]))
          )
          .replace(
            `{${"value"}}`,
            encodeURIComponent(String(requestParameters["value"]))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<boolean>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   */
  async checkIndexRowAvailable(
    requestParameters: CheckIndexRowAvailableRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<boolean> {
    const response = await this.checkIndexRowAvailableRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async createIndexRowRaw(
    requestParameters: CreateIndexRowRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters["PeachId"] != null) {
      queryParameters["PeachId"] = requestParameters["PeachId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/Index`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: CreateIndexRowDtoToJSON(requestParameters["createIndexRowDto"]),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async createIndexRow(
    requestParameters: CreateIndexRowRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.createIndexRowRaw(requestParameters, initOverrides);
  }

  /**
   */
  async deleteIndexRowRaw(
    requestParameters: DeleteIndexRowRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["indexId"] == null) {
      throw new runtime.RequiredError(
        "indexId",
        'Required parameter "indexId" was null or undefined when calling deleteIndexRow().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["PeachId"] != null) {
      queryParameters["PeachId"] = requestParameters["PeachId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Index/{indexId}`.replace(
          `{${"indexId"}}`,
          encodeURIComponent(String(requestParameters["indexId"]))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async deleteIndexRow(
    requestParameters: DeleteIndexRowRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteIndexRowRaw(requestParameters, initOverrides);
  }

  /**
   */
  async getIndexRowsRaw(
    requestParameters: GetIndexRowsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<IndexRowDtoGridResult>> {
    const queryParameters: any = {};

    if (requestParameters["PeachId"] != null) {
      queryParameters["PeachId"] = requestParameters["PeachId"];
    }

    if (requestParameters["request"] != null) {
      queryParameters["request"] = requestParameters["request"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Index`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      IndexRowDtoGridResultFromJSON(jsonValue)
    );
  }

  /**
   */
  async getIndexRows(
    requestParameters: GetIndexRowsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<IndexRowDtoGridResult> {
    const response = await this.getIndexRowsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async updateIndexRowRaw(
    requestParameters: UpdateIndexRowRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters["PeachId"] != null) {
      queryParameters["PeachId"] = requestParameters["PeachId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/Index`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateIndexRowDtoToJSON(requestParameters["updateIndexRowDto"]),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async updateIndexRow(
    requestParameters: UpdateIndexRowRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.updateIndexRowRaw(requestParameters, initOverrides);
  }
}
