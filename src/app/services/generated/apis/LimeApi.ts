/* tslint:disable */
/* eslint-disable */
/**
 * Cranberry.WebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  AssignKiwiLimeToCarDto,
  AssignLimeToCarDto,
  AssignLimeToIdentifierDto,
  CarIdsDto,
  CherrynachrichtDtoGridResult,
  CreateLimeDto,
  LimeDtoGridResult,
  Lychees,
  UpdateLimeDto,
} from "../models/index";
import {
  AssignKiwiLimeToCarDtoToJSON,
  AssignLimeToCarDtoFromJSON,
  AssignLimeToCarDtoToJSON,
  AssignLimeToIdentifierDtoToJSON,
  CarIdsDtoFromJSON,
  CherrynachrichtDtoGridResultFromJSON,
  CreateLimeDtoToJSON,
  LimeDtoGridResultFromJSON,
  UpdateLimeDtoFromJSON,
  UpdateLimeDtoToJSON,
} from "../models/index";
import * as runtime from "../runtime";

export interface AssignIdentifierRequest {
  id: number;
  assignLimeToIdentifierDto?: AssignLimeToIdentifierDto;
}

export interface AssignCarRequest {
  id: number;
  assignLimeToCarDto?: AssignLimeToCarDto;
}

export interface AssignCarKiwiRequest {
  id: number;
  assignKiwiLimeToCarDto?: AssignKiwiLimeToCarDto;
}

export interface CreateLimeRequest {
  createLimeDto?: CreateLimeDto;
}

export interface DeleteLimeRequest {
  id: number;
  Lychees: Lychees;
}

export interface GetCherrynachrichtenRequest {
  request?: any;
  textFilter?: string;
}

export interface GetCarRequest {
  id: number;
}

export interface GetCarKiwiRequest {
  id: number;
}

export interface GetLimesRequest {
  request?: any;
  textFilter?: string;
}

export interface GetUpdateLimeRequest {
  id?: number;
  Lychees?: Lychees;
}

export interface UnassignIdentifierRequest {
  id: number;
  identifierId: number;
}

export interface UnassignCarRequest {
  id: number;
}

export interface UpdateLimeRequest {
  id: number;
  Lychees: Lychees;
  updateLimeDto?: UpdateLimeDto;
}

/**
 *
 */
export class LimeApi extends runtime.BaseAPI {
  /**
   */
  async assignIdentifierRaw(
    requestParameters: AssignIdentifierRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling assignIdentifier().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/Lime/{id}/identifier`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"]))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: AssignLimeToIdentifierDtoToJSON(
          requestParameters["assignLimeToIdentifierDto"]
        ),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async assignIdentifier(
    requestParameters: AssignIdentifierRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.assignIdentifierRaw(requestParameters, initOverrides);
  }

  /**
   */
  async assignCarRaw(
    requestParameters: AssignCarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling assignCar().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/Lime/{id}/Car`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"]))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: AssignLimeToCarDtoToJSON(requestParameters["assignLimeToCarDto"]),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async assignCar(
    requestParameters: AssignCarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.assignCarRaw(requestParameters, initOverrides);
  }

  /**
   */
  async assignCarKiwiRaw(
    requestParameters: AssignCarKiwiRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling assignCarKiwi().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/Lime/{id}/CarKiwi`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"]))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: AssignKiwiLimeToCarDtoToJSON(
          requestParameters["assignKiwiLimeToCarDto"]
        ),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async assignCarKiwi(
    requestParameters: AssignCarKiwiRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.assignCarKiwiRaw(requestParameters, initOverrides);
  }

  /**
   */
  async createLimeRaw(
    requestParameters: CreateLimeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/Lime`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: CreateLimeDtoToJSON(requestParameters["createLimeDto"]),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async createLime(
    requestParameters: CreateLimeRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.createLimeRaw(requestParameters, initOverrides);
  }

  /**
   */
  async deleteLimeRaw(
    requestParameters: DeleteLimeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling deleteLime().'
      );
    }

    if (requestParameters["Lychees"] == null) {
      throw new runtime.RequiredError(
        "Lychees",
        'Required parameter "Lychees" was null or undefined when calling deleteLime().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lime/{id}/{Lychees}`
          .replace(
            `{${"id"}}`,
            encodeURIComponent(String(requestParameters["id"]))
          )
          .replace(
            `{${"Lychees"}}`,
            encodeURIComponent(String(requestParameters["Lychees"]))
          ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async deleteLime(
    requestParameters: DeleteLimeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteLimeRaw(requestParameters, initOverrides);
  }

  /**
   */
  async getCherrynachrichtenRaw(
    requestParameters: GetCherrynachrichtenRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CherrynachrichtDtoGridResult>> {
    const queryParameters: any = {};

    if (requestParameters["request"] != null) {
      queryParameters["request"] = requestParameters["request"];
    }

    if (requestParameters["textFilter"] != null) {
      queryParameters["textFilter"] = requestParameters["textFilter"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lime/Cherrynachrichten`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CherrynachrichtDtoGridResultFromJSON(jsonValue)
    );
  }

  /**
   */
  async getCherrynachrichten(
    requestParameters: GetCherrynachrichtenRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CherrynachrichtDtoGridResult> {
    const response = await this.getCherrynachrichtenRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getCarRaw(
    requestParameters: GetCarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CarIdsDto>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getCar().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lime/{id}/Car`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"]))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CarIdsDtoFromJSON(jsonValue)
    );
  }

  /**
   */
  async getCar(
    requestParameters: GetCarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CarIdsDto> {
    const response = await this.getCarRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async getCarKiwiRaw(
    requestParameters: GetCarKiwiRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AssignLimeToCarDto>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getCarKiwi().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lime/{id}/CarKiwi`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"]))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AssignLimeToCarDtoFromJSON(jsonValue)
    );
  }

  /**
   */
  async getCarKiwi(
    requestParameters: GetCarKiwiRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AssignLimeToCarDto> {
    const response = await this.getCarKiwiRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async getLimesRaw(
    requestParameters: GetLimesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<LimeDtoGridResult>> {
    const queryParameters: any = {};

    if (requestParameters["request"] != null) {
      queryParameters["request"] = requestParameters["request"];
    }

    if (requestParameters["textFilter"] != null) {
      queryParameters["textFilter"] = requestParameters["textFilter"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lime`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      LimeDtoGridResultFromJSON(jsonValue)
    );
  }

  /**
   */
  async getLimes(
    requestParameters: GetLimesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<LimeDtoGridResult> {
    const response = await this.getLimesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async getUpdateLimeRaw(
    requestParameters: GetUpdateLimeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UpdateLimeDto>> {
    const queryParameters: any = {};

    if (requestParameters["id"] != null) {
      queryParameters["id"] = requestParameters["id"];
    }

    if (requestParameters["Lychees"] != null) {
      queryParameters["Lychees"] = requestParameters["Lychees"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lime/Update`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UpdateLimeDtoFromJSON(jsonValue)
    );
  }

  /**
   */
  async getUpdateLime(
    requestParameters: GetUpdateLimeRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UpdateLimeDto> {
    const response = await this.getUpdateLimeRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async unassignIdentifierRaw(
    requestParameters: UnassignIdentifierRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling unassignIdentifier().'
      );
    }

    if (requestParameters["identifierId"] == null) {
      throw new runtime.RequiredError(
        "identifierId",
        'Required parameter "identifierId" was null or undefined when calling unassignIdentifier().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lime/{id}/identifier/{identifierId}`
          .replace(
            `{${"id"}}`,
            encodeURIComponent(String(requestParameters["id"]))
          )
          .replace(
            `{${"identifierId"}}`,
            encodeURIComponent(String(requestParameters["identifierId"]))
          ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async unassignIdentifier(
    requestParameters: UnassignIdentifierRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.unassignIdentifierRaw(requestParameters, initOverrides);
  }

  /**
   */
  async unassignCarRaw(
    requestParameters: UnassignCarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling unassignCar().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Lime/{id}/Car`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"]))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async unassignCar(
    requestParameters: UnassignCarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.unassignCarRaw(requestParameters, initOverrides);
  }

  /**
   */
  async updateLimeRaw(
    requestParameters: UpdateLimeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling updateLime().'
      );
    }

    if (requestParameters["Lychees"] == null) {
      throw new runtime.RequiredError(
        "Lychees",
        'Required parameter "Lychees" was null or undefined when calling updateLime().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/Lime/{id}/{Lychees}`
          .replace(
            `{${"id"}}`,
            encodeURIComponent(String(requestParameters["id"]))
          )
          .replace(
            `{${"Lychees"}}`,
            encodeURIComponent(String(requestParameters["Lychees"]))
          ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateLimeDtoToJSON(requestParameters["updateLimeDto"]),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async updateLime(
    requestParameters: UpdateLimeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.updateLimeRaw(requestParameters, initOverrides);
  }
}
