/* tslint:disable */
/* eslint-disable */
/**
 * Cranberry.WebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { FavoriteDto, FavoriteType } from "../models/index";
import { FavoriteDtoFromJSON } from "../models/index";
import * as runtime from "../runtime";

export interface AddFavoriteRequest {
  type?: FavoriteType;
  keyInt?: number;
  keyString?: string;
}

export interface GetFavoritesRequest {
  type: FavoriteType;
}

export interface RemoveFavoriteRequest {
  id: number;
}

/**
 *
 */
export class FavoritesApi extends runtime.BaseAPI {
  /**
   */
  async addFavoriteRaw(
    requestParameters: AddFavoriteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters["type"] != null) {
      queryParameters["type"] = requestParameters["type"];
    }

    if (requestParameters["keyInt"] != null) {
      queryParameters["keyInt"] = requestParameters["keyInt"];
    }

    if (requestParameters["keyString"] != null) {
      queryParameters["keyString"] = requestParameters["keyString"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Favorites`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async addFavorite(
    requestParameters: AddFavoriteRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.addFavoriteRaw(requestParameters, initOverrides);
  }

  /**
   */
  async getFavoritesRaw(
    requestParameters: GetFavoritesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<FavoriteDto>>> {
    if (requestParameters["type"] == null) {
      throw new runtime.RequiredError(
        "type",
        'Required parameter "type" was null or undefined when calling getFavorites().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Favorites/{type}`.replace(
          `{${"type"}}`,
          encodeURIComponent(String(requestParameters["type"]))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(FavoriteDtoFromJSON)
    );
  }

  /**
   */
  async getFavorites(
    requestParameters: GetFavoritesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<FavoriteDto>> {
    const response = await this.getFavoritesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async removeFavoriteRaw(
    requestParameters: RemoveFavoriteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling removeFavorite().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Favorites/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"]))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async removeFavorite(
    requestParameters: RemoveFavoriteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.removeFavoriteRaw(requestParameters, initOverrides);
  }
}
