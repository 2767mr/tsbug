/* tslint:disable */
/* eslint-disable */
/**
 * Cranberry.WebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  AppleDtoGridResult,
  CreateAppleDto,
  Lychees,
  UpdateAppleDto,
} from "../models/index";
import {
  AppleDtoGridResultFromJSON,
  CreateAppleDtoToJSON,
  UpdateAppleDtoToJSON,
} from "../models/index";
import * as runtime from "../runtime";

export interface CreateAppleRequest {
  createAppleDto?: CreateAppleDto;
}

export interface DeleteAppleRequest {
  id: number;
  Lychees: Lychees;
}

export interface GetAppleesRequest {
  request?: any;
  Orange11Ids?: Array<number>;
  Orange29Ids?: Array<number>;
  textFilter?: string;
}

export interface UpdateAppleRequest {
  id: number;
  updateAppleDto?: UpdateAppleDto;
}

/**
 *
 */
export class AppleApi extends runtime.BaseAPI {
  /**
   */
  async createAppleRaw(
    requestParameters: CreateAppleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/Apple`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateAppleDtoToJSON(requestParameters["createAppleDto"]),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async createApple(
    requestParameters: CreateAppleRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.createAppleRaw(requestParameters, initOverrides);
  }

  /**
   */
  async deleteAppleRaw(
    requestParameters: DeleteAppleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling deleteApple().'
      );
    }

    if (requestParameters["Lychees"] == null) {
      throw new runtime.RequiredError(
        "Lychees",
        'Required parameter "Lychees" was null or undefined when calling deleteApple().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Apple/{Lychees}/{id}`
          .replace(
            `{${"id"}}`,
            encodeURIComponent(String(requestParameters["id"]))
          )
          .replace(
            `{${"Lychees"}}`,
            encodeURIComponent(String(requestParameters["Lychees"]))
          ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async deleteApple(
    requestParameters: DeleteAppleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteAppleRaw(requestParameters, initOverrides);
  }

  /**
   */
  async getAppleesRaw(
    requestParameters: GetAppleesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AppleDtoGridResult>> {
    const queryParameters: any = {};

    if (requestParameters["request"] != null) {
      queryParameters["request"] = requestParameters["request"];
    }

    if (requestParameters["Orange11Ids"] != null) {
      queryParameters["Orange11Ids"] = requestParameters["Orange11Ids"];
    }

    if (requestParameters["Orange29Ids"] != null) {
      queryParameters["Orange29Ids"] = requestParameters["Orange29Ids"];
    }

    if (requestParameters["textFilter"] != null) {
      queryParameters["textFilter"] = requestParameters["textFilter"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Apple`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AppleDtoGridResultFromJSON(jsonValue)
    );
  }

  /**
   */
  async getApplees(
    requestParameters: GetAppleesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AppleDtoGridResult> {
    const response = await this.getAppleesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async updateAppleRaw(
    requestParameters: UpdateAppleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling updateApple().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/Apple/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"]))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateAppleDtoToJSON(requestParameters["updateAppleDto"]),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async updateApple(
    requestParameters: UpdateAppleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.updateAppleRaw(requestParameters, initOverrides);
  }
}
