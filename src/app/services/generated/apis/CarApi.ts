/* tslint:disable */
/* eslint-disable */
/**
 * Cranberry.WebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  CarDetailDto,
  CarDtoGridResult,
  CreateCarDto,
  Lychees,
  UpdateCarDto,
} from "../models/index";
import {
  CarDetailDtoFromJSON,
  CarDtoGridResultFromJSON,
  CreateCarDtoToJSON,
  UpdateCarDtoToJSON,
} from "../models/index";
import * as runtime from "../runtime";

export interface CheckAvailabilityRequest {
  AppleId: number;
  Lychees: Lychees;
  code: string;
}

export interface CreateCarRequest {
  createCarDto?: CreateCarDto;
}

export interface DeleteCarRequest {
  CarId: number;
  Lychees: Lychees;
}

export interface GetCarDetailsRequest {
  CarId: number;
  Lychees: Lychees;
}

export interface GetCarsRequest {
  Lychees: Lychees;
  request?: any;
  Apple?: number;
}

export interface UpdateCarRequest {
  CarId: number;
  updateCarDto?: UpdateCarDto;
}

/**
 *
 */
export class CarApi extends runtime.BaseAPI {
  /**
   */
  async checkAvailabilityRaw(
    requestParameters: CheckAvailabilityRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<boolean>> {
    if (requestParameters["AppleId"] == null) {
      throw new runtime.RequiredError(
        "AppleId",
        'Required parameter "AppleId" was null or undefined when calling checkAvailability().'
      );
    }

    if (requestParameters["Lychees"] == null) {
      throw new runtime.RequiredError(
        "Lychees",
        'Required parameter "Lychees" was null or undefined when calling checkAvailability().'
      );
    }

    if (requestParameters["code"] == null) {
      throw new runtime.RequiredError(
        "code",
        'Required parameter "code" was null or undefined when calling checkAvailability().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Car/available/{Lychees}/{AppleId}/{code}`
          .replace(
            `{${"AppleId"}}`,
            encodeURIComponent(String(requestParameters["AppleId"]))
          )
          .replace(
            `{${"Lychees"}}`,
            encodeURIComponent(String(requestParameters["Lychees"]))
          )
          .replace(
            `{${"code"}}`,
            encodeURIComponent(String(requestParameters["code"]))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<boolean>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   */
  async checkAvailability(
    requestParameters: CheckAvailabilityRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<boolean> {
    const response = await this.checkAvailabilityRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async createCarRaw(
    requestParameters: CreateCarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/Car`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateCarDtoToJSON(requestParameters["createCarDto"]),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async createCar(
    requestParameters: CreateCarRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.createCarRaw(requestParameters, initOverrides);
  }

  /**
   */
  async deleteCarRaw(
    requestParameters: DeleteCarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["CarId"] == null) {
      throw new runtime.RequiredError(
        "CarId",
        'Required parameter "CarId" was null or undefined when calling deleteCar().'
      );
    }

    if (requestParameters["Lychees"] == null) {
      throw new runtime.RequiredError(
        "Lychees",
        'Required parameter "Lychees" was null or undefined when calling deleteCar().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Car/{Lychees}/{CarId}`
          .replace(
            `{${"CarId"}}`,
            encodeURIComponent(String(requestParameters["CarId"]))
          )
          .replace(
            `{${"Lychees"}}`,
            encodeURIComponent(String(requestParameters["Lychees"]))
          ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async deleteCar(
    requestParameters: DeleteCarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteCarRaw(requestParameters, initOverrides);
  }

  /**
   */
  async getCarDetailsRaw(
    requestParameters: GetCarDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CarDetailDto>> {
    if (requestParameters["CarId"] == null) {
      throw new runtime.RequiredError(
        "CarId",
        'Required parameter "CarId" was null or undefined when calling getCarDetails().'
      );
    }

    if (requestParameters["Lychees"] == null) {
      throw new runtime.RequiredError(
        "Lychees",
        'Required parameter "Lychees" was null or undefined when calling getCarDetails().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Car/{Lychees}/{CarId}`
          .replace(
            `{${"CarId"}}`,
            encodeURIComponent(String(requestParameters["CarId"]))
          )
          .replace(
            `{${"Lychees"}}`,
            encodeURIComponent(String(requestParameters["Lychees"]))
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CarDetailDtoFromJSON(jsonValue)
    );
  }

  /**
   */
  async getCarDetails(
    requestParameters: GetCarDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CarDetailDto> {
    const response = await this.getCarDetailsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getCarsRaw(
    requestParameters: GetCarsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CarDtoGridResult>> {
    if (requestParameters["Lychees"] == null) {
      throw new runtime.RequiredError(
        "Lychees",
        'Required parameter "Lychees" was null or undefined when calling getCars().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["request"] != null) {
      queryParameters["request"] = requestParameters["request"];
    }

    if (requestParameters["Apple"] != null) {
      queryParameters["Apple"] = requestParameters["Apple"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Car/{Lychees}`.replace(
          `{${"Lychees"}}`,
          encodeURIComponent(String(requestParameters["Lychees"]))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CarDtoGridResultFromJSON(jsonValue)
    );
  }

  /**
   */
  async getCars(
    requestParameters: GetCarsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CarDtoGridResult> {
    const response = await this.getCarsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async updateCarRaw(
    requestParameters: UpdateCarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["CarId"] == null) {
      throw new runtime.RequiredError(
        "CarId",
        'Required parameter "CarId" was null or undefined when calling updateCar().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/Car/{CarId}`.replace(
          `{${"CarId"}}`,
          encodeURIComponent(String(requestParameters["CarId"]))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateCarDtoToJSON(requestParameters["updateCarDto"]),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async updateCar(
    requestParameters: UpdateCarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.updateCarRaw(requestParameters, initOverrides);
  }
}
